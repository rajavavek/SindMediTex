import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense, Dropout
from sklearn.metrics import classification_report, accuracy_score

# Load Dataset
data_url = "https://github.com/rajavavek/Sentiment-Analysis-of-Sindhi-Medical-Text/blob/main/textda.csv?raw=true"
dataset = pd.read_csv(data_url)

# Preview the dataset
print("Dataset Preview:")
print(dataset.head())

# Data preprocessing
texts = dataset['Text']
labels = dataset['Label']

# Encode labels
label_encoder = LabelEncoder()
labels_encoded = label_encoder.fit_transform(labels)

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(texts, labels_encoded, test_size=0.2, random_state=42, stratify=labels_encoded)

# Tokenization and padding
max_vocab_size = 20000
max_sequence_length = 100
tokenizer = Tokenizer(num_words=max_vocab_size, oov_token="<OOV>")
tokenizer.fit_on_texts(X_train)

X_train_sequences = tokenizer.texts_to_sequences(X_train)
X_test_sequences = tokenizer.texts_to_sequences(X_test)

X_train_padded = pad_sequences(X_train_sequences, maxlen=max_sequence_length, padding='post', truncating='post')
X_test_padded = pad_sequences(X_test_sequences, maxlen=max_sequence_length, padding='post', truncating='post')

# Model Building
embedding_dim = 128
num_classes = len(label_encoder.classes_)

model = Sequential([
    Embedding(max_vocab_size, embedding_dim, input_length=max_sequence_length),
    Conv1D(filters=128, kernel_size=5, activation='relu'),
    GlobalMaxPooling1D(),
    Dropout(0.5),
    Dense(64, activation='relu'),
    Dense(num_classes, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
batch_size = 32
epochs = 10

history = model.fit(
    X_train_padded, y_train,
    validation_data=(X_test_padded, y_test),
    batch_size=batch_size,
    epochs=epochs,
    verbose=1
)

# Evaluate the model
y_pred = np.argmax(model.predict(X_test_padded), axis=1)
accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)

# Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# Save the model and tokenizer
model.save("sindhi_medical_text_model.h5")
with open("tokenizer.json", "w") as f:
    f.write(tokenizer.to_json())
