# -*- coding: utf-8 -*-
"""CNN Model SMT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-VWAEyLY1eLqlbkEzlxWGr9zzKG8yxBF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, Flatten, Dense, Dropout

# Load dataset
url = 'https://github.com/rajavavek/SindMediTex/blob/main/SindMediTex.csv?raw=true'
data = pd.read_csv(url)

# Inspect dataset
print(data.head())

# Dataset columns
text_column = "Text"
label_column = "Label"

# Preprocess labels
label_encoder = LabelEncoder()
data[label_column] = label_encoder.fit_transform(data[label_column])
labels = data[label_column].values

# Preprocess text
tokenizer = Tokenizer(num_words=10000, oov_token="<OOV>")
tokenizer.fit_on_texts(data[text_column])

# Convert text to sequences
sequences = tokenizer.texts_to_sequences(data[text_column])

# Pad sequences
max_length = 100
padded_sequences = pad_sequences(sequences, maxlen=max_length, padding='post', truncating='post')

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(padded_sequences, labels, test_size=0.2, random_state=42)

# Model creation
model = Sequential([
    Embedding(input_dim=10000, output_dim=128, input_length=max_length),
    Conv1D(64, kernel_size=3, activation='relu'),
    MaxPooling1D(pool_size=2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(len(np.unique(labels)), activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=10,
    batch_size=32
)

# Plot training history
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Evaluate the model
eval_loss, eval_acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {eval_acc:.2f}")

# Save the tokenizer and model
tokenizer_json = tokenizer.to_json()
with open('tokenizer.json', 'w') as f:
    f.write(tokenizer_json)

model.save('sindhi_medical_sentiment_model.h5')